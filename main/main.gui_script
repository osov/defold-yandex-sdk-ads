-- Logging helpers
local pretty_print = require('main.pretty_print')
local function lines(str)
	local t = {}
	local function helper(line) table.insert(t, line) return '' end
	helper((str:gsub('(.-)\n', helper)))
	return t
end
local logs_lines = {}
local function log(text)
	local text_lines = lines(text)
	for i = 1, #text_lines do
		table.insert(logs_lines, text_lines[i])
		if #logs_lines > 62 then
			table.remove(logs_lines, 1)
		end
	end
end
local function log_flush()
	gui.set_text(gui.get_node('logs_label'), table.concat(logs_lines, '\n'))
end
local function plog(t)
	log(pretty_print(t))
end

-- List ids for all platforms.
local yandexads_ids = {
	['iPhone OS'] = {
		banner       = 'R-M-4647371-1', -- 'demo-banner-yandex'
		interstitial = 'demo-interstitial-yandex',
		rewarded     = 'demo-rewarded-yandex'
	},
	Android = {
		banner       = 'demo-banner-yandex',
		interstitial = 'demo-interstitial-yandex',
		rewarded     = 'demo-rewarded-yandex'
	}
}

local system_name = sys.get_sys_info().system_name
-- Leave only current system ids
yandexads_ids = yandexads_ids[system_name] or {}

-- YandexAds event handler.
local function yandexads_listener(self, message_id, message)
	log('yandexads_listener')
	plog({message_id = message_id, message = message})
end

-- Button handlers

local function init_pressed(self)
	log('init_pressed')
	-- Init YandexAds
	yandexads.set_callback(yandexads_listener)
	yandexads.initialize()
end


-- Banner

local function load_banner_pressed(self)
	log('load_banner_pressed')
	yandexads.load_banner(yandexads_ids.banner)
end

local function is_banner_loaded_pressed(self)
	log('is_banner_loaded_pressed')
	log('Is banner loaded? ' .. (yandexads.is_banner_loaded() and 'Yes' or 'No'))
end

local function show_banner_pressed(self)
	log('show_banner_pressed')
	yandexads.show_banner(yandexads.POS_BOTTOM_CENTER, 350)
end

local function hide_banner_pressed(self)
	log('hide_banner_pressed')
	yandexads.hide_banner()
end

local function destroy_banner_pressed(self)
	log('destroy_banner_pressed')
	yandexads.destroy_banner()
end

-- Interstitial

local function load_interstitial_pressed(self)
	log('load_interstitial_pressed')
	yandexads.load_interstitial(yandexads_ids.interstitial)
end

local function is_interstitial_loaded_pressed(self)
	log('is_interstitial_loaded_pressed')
	log('Is interstitial loaded? ' .. (yandexads.is_interstitial_loaded() and 'Yes' or 'No'))
end

local function show_interstitial_pressed(self)
	log('show_interstitial_pressed')
	yandexads.show_interstitial()
end

-- Rewarded

local function load_rewarded_pressed(self)
	log('load_rewarded_pressed')
	yandexads.load_rewarded(yandexads_ids.rewarded)
end

local function is_rewarded_loaded_pressed(self)
	log('is_rewarded_loaded_pressed')
	log('Is rewarded loaded? ' .. (yandexads.is_rewarded_loaded() and 'Yes' or 'No'))
end

local function show_rewarded_pressed(self)
	log('show_rewarded_pressed')
	yandexads.show_rewarded()
end


-- Show/hide logs view

local function logs_pressed(self)
	gui.set_enabled(gui.get_node('logs'), not gui.is_enabled(gui.get_node('logs')))
end


-- GUI init
function init(self)
	msg.post('.', 'acquire_input_focus')    
	msg.post('@render:', 'clear_color', {color = vmath.vector4(1.0, 1.0, 1.0, 1.0)})
	gui.set_enabled(gui.get_node('logs'), false)
end

-- Update logs view
local frame = 0
function update(self, dt)
	frame = frame + 1
	if frame == 30 then
		log_flush()
		frame = 0
	end
end

-- Check if a button is clicked
local function button_click(self, action, node_name, callback)
	if gui.pick_node(gui.get_node(node_name), action.x, action.y) then
		if action.pressed then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1.02, 1.02, 1.02))
		elseif action.released then
			gui.set_scale(gui.get_node(node_name), vmath.vector3(1, 1, 1))
			callback(self)
		end
	end
end

local buttons = {
	btn_init = init_pressed,
	
	btn_load_banner      = load_banner_pressed,
	btn_is_banner_loaded = is_banner_loaded_pressed,
	btn_show_banner      = show_banner_pressed,
	btn_hide_banner      = hide_banner_pressed,
	btn_destroy_banner   = destroy_banner_pressed,
	
	btn_load_interstitial      = load_interstitial_pressed,
	btn_is_interstitial_loaded = is_interstitial_loaded_pressed,
	btn_show_interstitial      = show_interstitial_pressed,
	
	btn_load_rewarded      = load_rewarded_pressed,
	btn_is_rewarded_loaded = is_rewarded_loaded_pressed,
	btn_show_rewarded      = show_rewarded_pressed,
	btn_logs = logs_pressed,

}

function on_input(self, action_id, action)
	if action_id == hash('touch') then
		for button, callback in pairs(buttons) do
			button_click(self, action, button, callback)
		end
	end
end
